[
  {
    "id": "5be3c4b4.b12ffc",
    "type": "tab",
    "label": "Remote Control",
    "disabled": false,
    "info": ""
  },
  {
    "id": "e38ab17d.22f52",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "tick every 30 min",
    "topic": "",
    "payload": "tick",
    "payloadType": "str",
    "repeat": "",
    "crontab": "*/30 0-23 * * *",
    "once": false,
    "onceDelay": "",
    "x": 150,
    "y": 560,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "1cd3b010.d2b5f",
    "type": "rpi-gpio out",
    "z": "5be3c4b4.b12ffc",
    "name": "GPIO14-CLOSE",
    "pin": "8",
    "set": true,
    "level": "1",
    "freq": "",
    "out": "out",
    "x": 1140,
    "y": 640,
    "wires": []
  },
  {
    "id": "218085be.92763a",
    "type": "rpi-gpio out",
    "z": "5be3c4b4.b12ffc",
    "name": "GPIO18-STOP",
    "pin": "12",
    "set": true,
    "level": "1",
    "freq": "",
    "out": "out",
    "x": 1140,
    "y": 560,
    "wires": []
  },
  {
    "id": "42fc4100.1bdb9",
    "type": "rpi-gpio out",
    "z": "5be3c4b4.b12ffc",
    "name": "GPIO15-OPEN",
    "pin": "10",
    "set": true,
    "level": "1",
    "freq": "",
    "out": "out",
    "x": 1140,
    "y": 480,
    "wires": []
  },
  {
    "id": "db869772.194098",
    "type": "trigger",
    "z": "5be3c4b4.b12ffc",
    "op1": "0",
    "op2": "1",
    "op1type": "str",
    "op2type": "str",
    "duration": "150",
    "extend": false,
    "units": "ms",
    "reset": "",
    "bytopic": "all",
    "name": "",
    "x": 940,
    "y": 480,
    "wires": [["42fc4100.1bdb9"]]
  },
  {
    "id": "f4b5c0db.aa01f",
    "type": "trigger",
    "z": "5be3c4b4.b12ffc",
    "op1": "0",
    "op2": "1",
    "op1type": "str",
    "op2type": "str",
    "duration": "150",
    "extend": false,
    "units": "ms",
    "reset": "",
    "bytopic": "all",
    "name": "",
    "x": 940,
    "y": 560,
    "wires": [["218085be.92763a"]]
  },
  {
    "id": "d8bbc3ef.384c",
    "type": "trigger",
    "z": "5be3c4b4.b12ffc",
    "op1": "0",
    "op2": "1",
    "op1type": "str",
    "op2type": "str",
    "duration": "150",
    "extend": false,
    "units": "ms",
    "reset": "",
    "bytopic": "all",
    "name": "",
    "x": 940,
    "y": 640,
    "wires": [["1cd3b010.d2b5f"]]
  },
  {
    "id": "de716278.7fd7d",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "40%",
    "topic": "",
    "payload": "40",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 260,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "20398bf9.3b46f4",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "80%",
    "topic": "",
    "payload": "80",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 180,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "be5f8b38.484cc8",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "100%",
    "topic": "",
    "payload": "100",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 140,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "6876dfec.b8a98",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "Control Shutters",
    "func": "const TIME_TO_FULLY_OPEN = 28000;  // in milli seconds\nconst TIME_TO_PAUSE = 3000;        // in milli seconds\nconst EPSILON = 3                  // ignore small position changes below this number of degrees\nconst press_open =  [ { payload: 1 }, null, null ];\nconst press_stop =  [ null, { payload: 1 }, null ];\nconst press_close = [ null, null, { payload: 1 } ];\nconst press_null =  [ null, null, null ];\n\nlet position = context.get('position');\nlet actions = [];\nlet delay_1 = 0\n\n// check if we need to reset the shutter\nif (position === undefined) {\n    actions.push({ delay: 0, msgs: press_close, fill: 'yellow', text: 'Resetting' });\n    delay_1 = TIME_TO_FULLY_OPEN+TIME_TO_PAUSE;\n    position = 0;\n}\n\n// clamp the command\nlet cmd = ( msg.payload < 0 + EPSILON ) ? 0 :\n          ( msg.payload > 100 - EPSILON ) ? 100 :\n            msg.payload;\n\n// when no significant change\nif (Math.abs(position - cmd) < EPSILON) {\n    actions.push({ delay: delay_1, msgs: press_null, fill: 'yellow', text: `No Change for ${cmd.toFixed(1)}%` });\n    cmd = position;\n    actions.push({ delay: delay_1+TIME_TO_PAUSE, msgs: press_null, fill: 'green', text: `Ready at ${cmd.toFixed(1)}%` });\n\n// when need to open shutter wider\n} else if (cmd > position) {\n    const delay_2 = TIME_TO_FULLY_OPEN * Math.abs(cmd - position) / 100;\n    const maybe_press_stop = (cmd == 100) ? press_null : press_stop;\n    actions.push({ delay: delay_1, msgs: press_open, fill: 'yellow', text: `Opening for ${(delay_2/1000).toFixed(1)}s` });\n    actions.push({ delay: delay_1+delay_2, msgs: maybe_press_stop, fill: 'green', text: `Ready at ${cmd.toFixed(1)}%` });\n\n// when need to close shutter narrower\n} else {\n    const delay_2 = TIME_TO_FULLY_OPEN * Math.abs(cmd - position) / 100;\n    const maybe_press_stop = (cmd === 0) ? press_null : press_stop;\n    actions.push({ delay: delay_1, msgs: press_close, fill: 'yellow', text: `Closing for ${(delay_2/1000).toFixed(1)}s` });\n    actions.push({ delay: delay_1+delay_2, msgs: maybe_press_stop, fill: 'green', text: `Ready at ${cmd.toFixed(1)}%` });\n}\n\ncontext.set('position', cmd);\n\n// schedule all the actions\nactions.forEach(action => {\n    setTimeout(function() {\n        node.status({fill: action.fill, shape: 'dot', text: action.text});\n        node.send( action.msgs );\n    }, action.delay);\n\n})\n\nreturn;",
    "outputs": 3,
    "noerr": 0,
    "x": 700,
    "y": 560,
    "wires": [["db869772.194098"], ["f4b5c0db.aa01f"], ["d8bbc3ef.384c"]],
    "inputLabels": ["Position %"],
    "outputLabels": ["Open", "Stop", "Close"]
  },
  {
    "id": "9c8a5495.aa4c38",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "20%",
    "topic": "",
    "payload": "20",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 300,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "aec7054f.f6f458",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "0%",
    "topic": "",
    "payload": "0",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 340,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "13149651.84f81a",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "60%",
    "topic": "",
    "payload": "60",
    "payloadType": "num",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 220,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "44e68c74.a47ba4",
    "type": "sun-position",
    "z": "5be3c4b4.b12ffc",
    "name": "",
    "positionConfig": "f8aec80d.db8858",
    "rules": [],
    "onlyOnChange": "true",
    "topic": "",
    "outputs": 1,
    "start": "",
    "startType": "none",
    "startOffset": 0,
    "startOffsetType": "none",
    "startOffsetMultiplier": 60000,
    "end": "",
    "endType": "none",
    "endOffset": 0,
    "endOffsetType": "none",
    "endOffsetMultiplier": 60000,
    "x": 630,
    "y": 60,
    "wires": [["a7759096.904d6"]]
  },
  {
    "id": "a7759096.904d6",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "Calculate Blind Angle",
    "func": "\n// 86 Excelsior Rd is aligned 10째 to the east of True North \nconst orientation = ( 10 ) * (2 * Math.PI) / 360;               // orientation of blind axis 0 = North, 90 = East, etc.\nconst h = Math.sin(msg.payload.altitudeRadians);                // unit height of sun vertically\nconst z = Math.cos(msg.payload.altitudeRadians);                // unit distance to sun horizontally\nconst w = z * Math.sin(msg.payload.azimuthRadians-orientation); // unit distance to sun horizontally perpendicular to blind axis\nconst theta = Math.atan2(h, w)*360/(2*Math.PI);                 // blind angle to sun 0 = sunset, 180 = sunrise\nmsg.payload.blind_angle = theta;\n\nconst status_text = `z ${z.toFixed(1)} | h ${h.toFixed(1)} | w ${w.toFixed(1)} | Theta ${theta.toFixed(1)}째`;\nnode.status({fill:\"green\", shape:\"dot\", text: status_text });\n\nconst log_text = `Elev ${msg.payload.altitude.toFixed(1)} | Azim ${msg.payload.azimuth.toFixed(1)} | ${status_text}`\nnode.log(log_text);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 900,
    "y": 60,
    "wires": [["eeae0e1a.8c182"]],
    "inputLabels": ["Sun Position"],
    "outputLabels": ["Blind Angle"]
  },
  {
    "id": "eeae0e1a.8c182",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "Angle to Position",
    "func": "// Convert blind_angle (0=sunset, 180=sunrise) to shutter position (0=closed, 100=open)\n//\n//     shutter position\n//            |\n//            |\n//        100 |   +\n//            |   *   *\n//            |   *       *\n//         60 *****           +               ****\n//         50 *                   *           *  *\n//            *                       *       *  *\n//            *                           *   *  *\n//            *                               +  *\n//  **********+----------------------------------+*********>  blind_angle\n//            0   15          90             165 180째\n//          sunset                               sunrise\n//\nconst ANGLE_AT_100PC = 30;                      // equiv to 90째 at 60%\nconst ANGLE_REFLECTION = -95;                  // angle to point reflection at -90 is vertically down\nconst ba = msg.payload.blind_angle;\nconst m = -100/(180 - ANGLE_AT_100PC);         // line slope\nconst c = 100 - m * ANGLE_AT_100PC;            // line intercept\n\nmsg.payload = (ba < -180) ? 0 :                 // invalid ie closed\n              (ba > 180) ? 0 :                  // invalid ie closed\n              (ba < -175) ? 60 :                // =180 to -175 sunrise ie open wide\n              (ba < 0) ? 0 :                    // -175 to 0 ie sun below horiz ie closed\n              (ba < ANGLE_AT_100PC) ? 60 :      // 0 to 15 very late afternoon  ie open wide\n              (ba > 165) ? 60 :                 // 165 to 180 very early morning ie open wide\n              (ba > 100) ? m * ((ba+ANGLE_REFLECTION)/2+90) + c :  // track the reflection  \n              m * ba + c;                       // track the sun ie y = mx + c\n\nconst text = `Theta ${ba.toFixed(1)}째 | Pos ${msg.payload.toFixed(1)}%`;\nnode.status({fill:\"green\", shape:\"dot\", text });\nnode.log(text);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 1130,
    "y": 60,
    "wires": [["6876dfec.b8a98"]],
    "inputLabels": ["Blind Angle"],
    "outputLabels": ["Position %"]
  },
  {
    "id": "f04baf73.2fdea",
    "type": "time-inject",
    "z": "5be3c4b4.b12ffc",
    "name": "",
    "positionConfig": "f8aec80d.db8858",
    "payload": "up",
    "payloadType": "str",
    "payloadTimeFormat": 0,
    "payloadOffset": 0,
    "payloadOffsetType": "none",
    "payloadOffsetMultiplier": 60000,
    "topic": "",
    "time": "sunrise",
    "timeType": "pdsTime",
    "timeDays": "*",
    "offset": 0,
    "offsetType": "none",
    "offsetMultiplier": 60000,
    "property": "",
    "propertyType": "none",
    "propertyCompare": "true",
    "propertyThreshold": "",
    "propertyThresholdType": "num",
    "timeAlt": "",
    "timeAltType": "entered",
    "timeAltOffset": 0,
    "timeAltOffsetType": "none",
    "timeAltOffsetMultiplier": 60000,
    "once": false,
    "onceDelay": 0.1,
    "addPayload1": "",
    "addPayload1Type": "none",
    "addPayload1Value": "",
    "addPayload1ValueType": "date",
    "addPayload1Format": "0",
    "addPayload1Offset": 0,
    "addPayload1OffsetType": "none",
    "addPayload1OffsetMultiplier": 60000,
    "addPayload1Days": "*",
    "addPayload2": "",
    "addPayload2Type": "none",
    "addPayload2Value": "",
    "addPayload2ValueType": "date",
    "addPayload2Format": "0",
    "addPayload2Offset": 0,
    "addPayload2OffsetType": "none",
    "addPayload2OffsetMultiplier": 60000,
    "addPayload2Days": "*",
    "addPayload3": "",
    "addPayload3Type": "none",
    "addPayload3Value": "",
    "addPayload3ValueType": "date",
    "addPayload3Format": "0",
    "addPayload3Offset": 0,
    "addPayload3OffsetType": "none",
    "addPayload3OffsetMultiplier": 60000,
    "addPayload3Days": "*",
    "recalcTime": 2,
    "x": 130,
    "y": 440,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "1290a419.d783cc",
    "type": "time-inject",
    "z": "5be3c4b4.b12ffc",
    "name": "",
    "positionConfig": "f8aec80d.db8858",
    "payload": "down",
    "payloadType": "str",
    "payloadTimeFormat": 0,
    "payloadOffset": 0,
    "payloadOffsetType": "none",
    "payloadOffsetMultiplier": 60000,
    "topic": "",
    "time": "sunset",
    "timeType": "pdsTime",
    "timeDays": "*",
    "offset": 0,
    "offsetType": "none",
    "offsetMultiplier": 60000,
    "property": "",
    "propertyType": "none",
    "propertyCompare": "true",
    "propertyThreshold": "",
    "propertyThresholdType": "num",
    "timeAlt": "",
    "timeAltType": "entered",
    "timeAltOffset": 0,
    "timeAltOffsetType": "none",
    "timeAltOffsetMultiplier": 60000,
    "once": false,
    "onceDelay": 0.1,
    "addPayload1": "",
    "addPayload1Type": "none",
    "addPayload1Value": "",
    "addPayload1ValueType": "date",
    "addPayload1Format": "0",
    "addPayload1Offset": 0,
    "addPayload1OffsetType": "none",
    "addPayload1OffsetMultiplier": 60000,
    "addPayload1Days": "*",
    "addPayload2": "",
    "addPayload2Type": "none",
    "addPayload2Value": "",
    "addPayload2ValueType": "date",
    "addPayload2Format": "0",
    "addPayload2Offset": 0,
    "addPayload2OffsetType": "none",
    "addPayload2OffsetMultiplier": 60000,
    "addPayload2Days": "*",
    "addPayload3": "",
    "addPayload3Type": "none",
    "addPayload3Value": "",
    "addPayload3ValueType": "date",
    "addPayload3Format": "0",
    "addPayload3Offset": 0,
    "addPayload3OffsetType": "none",
    "addPayload3OffsetMultiplier": 60000,
    "addPayload3Days": "*",
    "recalcTime": 2,
    "x": 140,
    "y": 500,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "7369f123.f1ac5",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "Control Mode",
    "func": "\nconst auto_weather = [ null, msg, null ];\nconst auto_force = [msg, null, null];\nconst manual_action = x => [null, null, { payload: x }];\nconst no_action = [ null, null, null ]\n\nlet mode = context.get('mode') || 'auto';\nlet sun = context.get('sun') || 'is up';\nlet msgs = no_action;\n\nswitch(msg.payload) {\n    case 'auto':\n        msgs = auto_weather;\n        mode = 'auto';\n        break;\n\n    case 'auto_force':\n        msgs = auto_force;\n        mode = 'auto';\n        break;\n\n    case 'up':\n        msgs = (mode == 'auto') ? auto_weather : no_action;\n        sun = 'is up';\n        break;\n\n    case 'down':\n        msgs = manual_action(0);\n        sun='is down';\n        break;\n\n    case 'tick':\n        if (mode == 'auto' && sun == 'is up')\n            msgs = auto_weather;\n        break;\n\n    default:\n        msgs = manual_action(msg.payload);\n        mode = 'manual';\n        break;\n\n}\n\nconst text = `${mode} Mode | Sun ${sun}`\nnode.status({fill:\"green\", shape:\"dot\", text});\n\ncontext.set('mode', mode);\ncontext.set('sun', sun);\n\nreturn msgs;",
    "outputs": 3,
    "noerr": 0,
    "x": 380,
    "y": 240,
    "wires": [["44e68c74.a47ba4"], ["f6bae5d1.01b438"], ["6876dfec.b8a98"]],
    "outputLabels": [
      "Automatic Control",
      "Check Weather Forecast",
      "Manual Control"
    ]
  },
  {
    "id": "6daf2c19.3ee454",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "Rain?",
    "func": "const close_shutter = [ null, { payload: 0 } ];\nconst auto_shutter = [ msg, null ];\nconst format_result = w => `Temp ${w.temperature}째C | Cloud ${(w.cloudCover*100).toFixed(0)}% | Rain ${w.precipIntensity.toFixed(2)} mm/hr | Prob ${(w.precipProbability*100).toFixed(0)}%`;\nconst format_time = d => new Date(d*1000).toString().split('(')[0];\n\nlet output_msgs = auto_shutter;\nlet w = {};\n\nw = msg.payload.currently;\nnode.log(`${format_time(w.time)}- ${format_result(w)}`);\nif (w.precipProbability>0.03) {\n    node.status({fill: 'yellow', shape: 'dot', text: format_result(w)});\n    output_msgs = close_shutter;\n} else {\n    node.status({fill: 'green', shape: 'dot', text: format_result(w)});\n}\n\n\nw = msg.payload.hourly.data[0];\nnode.log(`${format_time(w.time)}- ${format_result(w)}`);\n\nw = msg.payload.hourly.data[1];\nnode.log(`${format_time(w.time)}- ${format_result(w)}`);\n\n\nreturn output_msgs;",
    "outputs": 2,
    "noerr": 0,
    "x": 690,
    "y": 240,
    "wires": [["44e68c74.a47ba4"], ["6876dfec.b8a98"]],
    "inputLabels": ["Dark Rain Forecast"],
    "outputLabels": ["No Rain", "Force Close"]
  },
  {
    "id": "f6bae5d1.01b438",
    "type": "http request",
    "z": "5be3c4b4.b12ffc",
    "name": "Weather",
    "method": "GET",
    "ret": "obj",
    "paytoqs": false,
    "url": "https://api.darksky.net/forecast/7c532ba25bf28dfd69bd3fef4f4ffadc/-33.6552691,151.1201541?units=ca",
    "tls": "",
    "proxy": "",
    "authType": "basic",
    "x": 560,
    "y": 240,
    "wires": [["6daf2c19.3ee454"]]
  },
  {
    "id": "36b5795c.0b44c6",
    "type": "pir",
    "z": "5be3c4b4.b12ffc",
    "name": "",
    "x": 110,
    "y": 640,
    "wires": [["197b86dc.854739"]]
  },
  {
    "id": "73bab967.f6d108",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "Auto",
    "topic": "",
    "payload": "auto",
    "payloadType": "str",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 100,
    "wires": [["7369f123.f1ac5"]],
    "outputLabels": ["Automatic control to sun position"]
  },
  {
    "id": "70e6484.fbfddb8",
    "type": "inject",
    "z": "5be3c4b4.b12ffc",
    "name": "AutoF",
    "topic": "",
    "payload": "auto_force",
    "payloadType": "str",
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "x": 110,
    "y": 60,
    "wires": [["7369f123.f1ac5"]],
    "outputLabels": ["Force Auto ignoring weather forecast"]
  },
  {
    "id": "197b86dc.854739",
    "type": "function",
    "z": "5be3c4b4.b12ffc",
    "name": "IR Control",
    "func": "const code = String(msg.payload)\nconst mapping = {\n    '398': 0,\n    '399': 'auto',\n    '400': 'auto',\n    '401': 'auto_force',\n    '512': 0,\n    '513': 10,\n    '514': 20,\n    '515': 30,\n    '516': 40,\n    '517': 50,\n    '518': 60,\n    '519': 70,\n    '520': 80,\n    '521': 90,\n}\n\nif (mapping[code] !== undefined) {\n    msg.payload = mapping[code];\n    node.status({ fill:\"green\", shape:\"dot\", text: `Cmd ${msg.payload}`});\n} else {\n    msg = null;\n    node.status({fill:\"yellow\", shape:\"dot\", text: `Code ${code}`});\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 240,
    "y": 640,
    "wires": [["7369f123.f1ac5"]]
  },
  {
    "id": "f8aec80d.db8858",
    "type": "position-config",
    "z": "",
    "name": "Mount Colah",
    "isValide": "true",
    "longitude": "0",
    "latitude": "0",
    "angleType": "deg",
    "timezoneOffset": "10"
  }
]
